import cv2
import numpy as np

# Get user supplied values
imagePath = "images/" + "10.jpg"

testCascPath = "haarcascades/" + "haarcascade_frontalface_default.xml"

palmCascPath = "haarcascades/" + "palm.xml"  # 5, 60,60
eyePairBigPath = "haarcascades/" + "eyePairBig.xml"  # 6, 60,60
mouthCascPath = "haarcascades/" + "mouth.xml"  # 40, 60,60
upperBodyCascPath = "haarcascades/" + "upperBody.xml"  # 20, 60,60
noseCascPath = "haarcascades/" + "nose.xml"  # 80, 60,60
fullBodyCascPath = "haarcascades/" + "fullBody.xml"  # 1, 60,60
faceCascPath = "haarcascades/" + "haarcascade_frontalface_default.xml"
fistCascPath = "haarcascades/" + "fist.xml"


# Create the haar cascades
testCascade = cv2.CascadeClassifier(testCascPath)

palmCascade = cv2.CascadeClassifier(palmCascPath)
eyePairCascade = cv2.CascadeClassifier(eyePairBigPath)
mouthCascade = cv2.CascadeClassifier(mouthCascPath)
upperBodyCascade = cv2.CascadeClassifier(upperBodyCascPath)
noseCascade = cv2.CascadeClassifier(noseCascPath)
fullBodyCascade = cv2.CascadeClassifier(fullBodyCascPath)
faceCascade = cv2.CascadeClassifier(faceCascPath)
fistCascade = cv2.CascadeClassifier(fistCascPath)

cascs = {
    "palm": palmCascade,
    "eyePair": eyePairCascade,
    "mouth": mouthCascade,
    "upperBody": upperBodyCascade,
    "nose": noseCascade,
    "fullBody": fullBodyCascade,
    "faceCascade": faceCascade,
    "fistCascade": fistCascade,
}

# list of minNeighbors
minNeighbors = {
    "palm": 75,
    "eyePair": 3,
    "mouth": 40,
    "upperBody": 20,
    "nose": 80,
    "fullBody": 1,
    "faceCascade": 40,
    "fistCascade": 75,
}  # 92

# list of colors
colors = [
    (255, 0, 0),
    (0, 255, 0),
    (0, 0, 255),
    (255, 255, 0),
    (0, 255, 255),
    (255, 0, 255),
    (255, 255, 255),
    (120, 50, 200),
]

colours = {
    "palm": (255, 0, 0),
    "eyePair": (0, 255, 0),
    "mouth": (0, 0, 255),
    "upperBody": (255, 255, 0),
    "nose": (0, 255, 255),
    "fullBody": (255, 0, 255),
    "faceCascade": (255, 255, 255),
    "fistCascade": (120, 50, 200),
}

# stores lists of rectangles generated by detectMultiScale
rectsList = {
    "palm": None,
    "eyePair": None,
    "mouth": None,
    "upperBody": None,
    "nose": None,
    "fullBody": None,
    "faceCascade": None,
    "fistCascade": None,
}

# display an image
def display_cv_image(image):
    scale_percent = 20  # percent of original size
    width = int(image.shape[1] * scale_percent / 100)
    height = int(image.shape[0] * scale_percent / 100)
    dim = (width, height)
    # resize image
    resized = cv2.resize(image, dim, interpolation=cv2.INTER_AREA)
    cv2.imshow("Image", resized)

# Read the image
image = cv2.imread(imagePath)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)


# Check Readiness

# queue, order of checking readiness, goal is to detect eyePair
checkReady = ["fullBody", "upperBody", "eyePair"]
checkImage = cv2.imread(imagePath)
checkGrayIm = cv2.imread(imagePath, cv2.COLOR_BGR2GRAY)
# change to false to now draw rectangles
drawRectangles = True
# concern will be over written to equal the part to indicate the point of failure
concern = False

# create a new offset tracker
offset = [0,0]

for i in range(len(checkReady)):
    # part to check
    part = checkReady[i]
    # use part as a key to casc dictionary
    cascade = cascs[part]
    # apply the cascade and generate all the 'rectangles'
    rects = cascade.detectMultiScale(
        checkGrayIm, scaleFactor=1.05, minNeighbors=minNeighbors[part]
    )

    # error check to make sure only 1 of the part is found
    N = len(rects)
    if N != 1:
        # update concern
        concern = part
        # temporary
        print("{} Not Found".format(part))
        break
    # draw rectangles
    elif drawRectangles:
        for (x, y, w, h) in rects:
            # offset the rectangles by the right amount
            x += offset[0]
            y += offset[1]

            cv2.rectangle(checkImage, (x, y), (x + w, y + h), colors[i], 2)
    # crop down the image
    (x, y, w, h) = rects[0]

    # update crop offset
    offset[0] += x 
    offset[1] += y

    checkGrayIm = checkGrayIm[y : y + h, x : x + w].copy()
    # store the found rectangles
    rectsList[part] = rects

# Indicate Readiness
if not concern:
    print("Completed Readiness Check Successfully!")
else:
    print("User in not Ready!")

display_cv_image(checkImage)


cv2.waitKey(0)


# for i in range(0, len(cascs)):
#     # detect the feature in question and save all instances as rects
#     rects = cascs[i].detectMultiScale(
#         gray, scaleFactor=1.05, minNeighbors=minNeighbors[i], minSize=(60, 60)
#     )

#     # Save all the rects:
#     rects_list[i] = rects

#     # Draw a rectangle around the faces
#     for (x, y, w, h) in rects:
#         cv2.rectangle(image, (x, y), (x + w, y + h), colors[i], 2)
#         # record that this object has been detected
#         features_found[i] += 1

# # Print out features and number of them that are found
# for i in range(0, len(feature_list)):
#     print(feature_list[i] + ": " + str(features_found[i]))


# scale_percent = 20  # percent of original size
# width = int(image.shape[1] * scale_percent / 100)
# height = int(image.shape[0] * scale_percent / 100)
# dim = (width, height)
# # resize image
# resized = cv2.resize(image, dim, interpolation=cv2.INTER_AREA)

# cv2.imshow("Image", resized)
# cv2.waitKey(0)
